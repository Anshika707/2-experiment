import java.util.*;

class Employee {
    private int id;
    private String name;
    private int age;
    private double salary;

    public Employee(int id, String name, int age, double salary) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public String getName() { return name; }
    public int getAge() { return age; }
    public double getSalary() { return salary; }

    @Override
    public String toString() {
        return String.format("ID: %d | Name: %s | Age: %d | Salary: %.2f", id, name, age, salary);
    }
}

public class SortEmployeesUsingLambda {
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee(101, "Alice", 28, 50000));
        employees.add(new Employee(102, "Bob", 35, 75000));
        employees.add(new Employee(103, "Charlie", 25, 45000));
        employees.add(new Employee(104, "David", 30, 60000));

        System.out.println("Original List:");
        employees.forEach(System.out::println);

        System.out.println("\nSorted by Name:");
        employees.sort((e1, e2) -> e1.getName().compareTo(e2.getName()));
        employees.forEach(System.out::println);

        System.out.println("\nSorted by Age:");
        employees.sort((e1, e2) -> Integer.compare(e1.getAge(), e2.getAge()));
        employees.forEach(System.out::println);

        System.out.println("\nSorted by Salary (Descending):");
        employees.sort((e1, e2) -> Double.compare(e2.getSalary(), e1.getSalary()));
        employees.forEach(System.out::println);
    }
}
import java.util.*;
import java.util.stream.*;

class Student {
    private String name;
    private double marks;

    public Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    public String getName() { return name; }
    public double getMarks() { return marks; }

    @Override
    public String toString() {
        return String.format("%s - %.2f%%", name, marks);
    }
}

public class FilterAndSortStudents {
    public static void main(String[] args) {
        List<Student> students = Arrays.asList(
                new Student("Alice", 82.5),
                new Student("Bob", 68.0),
                new Student("Charlie", 91.2),
                new Student("David", 73.4),
                new Student("Eva", 88.9)
        );

        System.out.println("Students Scoring Above 75% (Sorted by Marks):");
        students.stream()
                .filter(s -> s.getMarks() > 75)
                .sorted(Comparator.comparingDouble(Student::getMarks).reversed())
                .map(Student::getName)
                .forEach(System.out::println);
    }
}
import java.util.*;
import java.util.stream.*;
import java.util.Map.Entry;

class Product {
    private String name;
    private String category;
    private double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String getName() { return name; }
    public String getCategory() { return category; }
    public double getPrice() { return price; }

    @Override
    public String toString() {
        return String.format("%s (%s) - $%.2f", name, category, price);
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product("Laptop", "Electronics", 1200.0),
                new Product("Phone", "Electronics", 800.0),
                new Product("Shirt", "Clothing", 45.0),
                new Product("Jeans", "Clothing", 60.0),
                new Product("Blender", "Home", 150.0),
                new Product("Vacuum", "Home", 300.0),
                new Product("Headphones", "Electronics", 250.0)
        );

        // Group by Category
        System.out.println("\nGrouped by Category:");
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));
        grouped.forEach((cat, prodList) -> {
            System.out.println(cat + ": " + prodList);
        });

        // Find Most Expensive Product per Category
        System.out.println("\nMost Expensive Product in Each Category:");
        Map<String, Optional<Product>> maxPriceByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        Product::getCategory,
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))
                ));
        maxPriceByCategory.forEach((cat, prod) -> 
            System.out.println(cat + ": " + prod.get())
        );

        // Calculate Average Price of All Products
        double averagePrice = products.stream()
                .collect(Collectors.averagingDouble(Product::getPrice));
        System.out.printf("\nAverage Price of All Products: $%.2f%n", averagePrice);
    }
}
